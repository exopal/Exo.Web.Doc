{
  "1": {
    "id": "1",
    "title": "Annuler un transport",
    "content": "",
    "url": "http://localhost:4000/docs/Transport/Annuler-transport/",
    "relUrl": "/docs/Transport/Annuler-transport/"
  },
  "2": {
    "id": "2",
    "title": "Demande de cotation d'un transport",
    "content": "",
    "url": "http://localhost:4000/docs/Transport/Demande-de-cotation-de-transport/",
    "relUrl": "/docs/Transport/Demande-de-cotation-de-transport/"
  },
  "3": {
    "id": "3",
    "title": "Exopal",
    "content": "C’est quoi Exopal",
    "url": "http://localhost:4000/docs/Esopack",
    "relUrl": "/docs/Esopack"
  },
  "4": {
    "id": "4",
    "title": "Facturation & paiement",
    "content": "facturation &amp; Paiment CSS utility classes come in handy when you to want to override default styles to create additional whitespace (margins/padding), correct unexpected shifts in font size or weight, add color, or hide (or show) something at a specific screen size.",
    "url": "http://localhost:4000/docs/Facturation-paiement",
    "relUrl": "/docs/Facturation-paiement"
  },
  "5": {
    "id": "5",
    "title": "Voir mes futurs entrées de stock",
    "content": "",
    "url": "http://localhost:4000/docs/Stockage/Futur_entrees/",
    "relUrl": "/docs/Stockage/Futur_entrees/"
  },
  "6": {
    "id": "6",
    "title": "Historique",
    "content": "",
    "url": "http://localhost:4000/docs/Stockage/Historique/",
    "relUrl": "/docs/Stockage/Historique/"
  },
  "7": {
    "id": "7",
    "title": "Lire ma facture",
    "content": "",
    "url": "http://localhost:4000/docs/Facturation-paiement/Lire-ma-facture/",
    "relUrl": "/docs/Facturation-paiement/Lire-ma-facture/"
  },
  "8": {
    "id": "8",
    "title": "Mes factures",
    "content": "Accéder à l’ensemble de mes factures Titre 2 Titre 3 Text can be bold, italic, or strikethrough. Link to another page.",
    "url": "http://localhost:4000/docs/Facturation-paiement/Mes-factures/",
    "relUrl": "/docs/Facturation-paiement/Mes-factures/"
  },
  "9": {
    "id": "9",
    "title": "Modifier mes coordonnées bancaires",
    "content": "",
    "url": "http://localhost:4000/docs/Facturation-paiement/Modifier-coordonnees-bancaires/",
    "relUrl": "/docs/Facturation-paiement/Modifier-coordonnees-bancaires/"
  },
  "10": {
    "id": "10",
    "title": "Une nouvelle commande de stockage",
    "content": "",
    "url": "http://localhost:4000/docs/Stockage/Nouvelle_commande_stock/",
    "relUrl": "/docs/Stockage/Nouvelle_commande_stock/"
  },
  "11": {
    "id": "11",
    "title": "Préparer ma commandes",
    "content": "",
    "url": "http://localhost:4000/docs/Preparation-et-collecte/Preeparer-mes-commandes/",
    "relUrl": "/docs/Preparation-et-collecte/Preeparer-mes-commandes/"
  },
  "12": {
    "id": "12",
    "title": "Préparation pour la collecte",
    "content": "Préparation et collecte",
    "url": "http://localhost:4000/docs/Preparation-et-collecte",
    "relUrl": "/docs/Preparation-et-collecte"
  },
  "13": {
    "id": "13",
    "title": "Stockage",
    "content": "",
    "url": "http://localhost:4000/docs/stockage",
    "relUrl": "/docs/stockage"
  },
  "14": {
    "id": "14",
    "title": "Transport",
    "content": "Transport CSS utility classes come in handy when you to want to override default styles to create additional whitespace (margins/padding), correct unexpected shifts in font size or weight, add color, or hide (or show) something at a specific screen size.",
    "url": "http://localhost:4000/docs/Transport",
    "relUrl": "/docs/Transport"
  },
  "15": {
    "id": "15",
    "title": "Voir mon stock",
    "content": "",
    "url": "http://localhost:4000/docs/Stockage/Voir_mon_stock/",
    "relUrl": "/docs/Stockage/Voir_mon_stock/"
  },
  "16": {
    "id": "16",
    "title": "Welcome",
    "content": "",
    "url": "http://localhost:4000/docs/Esopack/Welcome/",
    "relUrl": "/docs/Esopack/Welcome/"
  },
  "17": {
    "id": "17",
    "title": "Modifier mon adresse e-mail",
    "content": "",
    "url": "http://localhost:4000/docs/Dashboard/adresse-email/",
    "relUrl": "/docs/Dashboard/adresse-email/"
  },
  "18": {
    "id": "18",
    "title": "Assurance",
    "content": "",
    "url": "http://localhost:4000/docs/Assurance",
    "relUrl": "/docs/Assurance"
  },
  "19": {
    "id": "19",
    "title": "Buttons",
    "content": "Buttons Basic button styles Links that look like buttons Button element Using utilities with buttons Button size Spacing between buttons Basic button styles Links that look like buttons Link button Link button Link button Link button Link button [Link button](http://example.com/){: .btn } [Link button](http://example.com/){: .btn .btn-purple } [Link button](http://example.com/){: .btn .btn-blue } [Link button](http://example.com/){: .btn .btn-green } [Link button](http://example.com/){: .btn .btn-outline } Button element GitHub Flavored Markdown does not support the button element, so you’ll have to use inline HTML for this: Button element &lt;button type=&quot;button&quot; name=&quot;button&quot; class=&quot;btn&quot;&gt;Button element&lt;/button&gt; Using utilities with buttons Button size Wrap the button in a container that uses the font-size utility classes to scale buttons: Big ass button Tiny ass button &lt;span class=&quot;fs-8&quot;&gt; [Link button](http://example.com/){: .btn } &lt;/span&gt; &lt;span class=&quot;fs-3&quot;&gt; [Tiny ass button](http://example.com/){: .btn } &lt;/span&gt; Spacing between buttons Use the margin utility classes to add spacing between two buttons in the same block. Button with space Button Button with more space Button [Button with space](http://example.com/){: .btn .btn-purple .mr-2 } [Button ](http://example.com/){: .btn .btn-blue } [Button with more space](http://example.com/){: .btn .btn-green .mr-4 } [Button ](http://example.com/){: .btn .btn-blue }",
    "url": "http://localhost:4000/docs/ui-components/buttons/",
    "relUrl": "/docs/ui-components/buttons/"
  },
  "20": {
    "id": "20",
    "title": "Cartes",
    "content": "Titre 1 Titre 2 Titre 3 Text can be bold, italic, or strikethrough. Link to another page.",
    "url": "http://localhost:4000/docs/Facturation-paiement/cartes/",
    "relUrl": "/docs/Facturation-paiement/cartes/"
  },
  "21": {
    "id": "21",
    "title": "Code",
    "content": "Code Table des matières code en ligne Syntax en surbrillance des blocs de code Blocs de code avec des exemples rendus code en ligne Le code peut être rendu en ligne en l’enveloppant dans des ticks simples. Lorem ipsum dolor sit amet, &lt;extrait de code en ligne&gt; élit adipisicing, fait une incursion temporelle dans le travail et dolore magna aliqua. &lt;/ div&gt; Lorem ipsum dolor sit amet, `&lt;extrait de code en ligne&gt;` élit adipisicing, fait une incursion temporelle dans le travail et dolore magna aliqua. Syntax en surbrillance des blocs de code Utilisez la syntaxe intégrée de Jekyll en mettant en surbrillance Rouge pour les blocs de code en utilisant trois backticks, suivis du nom de la langue: // code Javascript avec coloration syntaxique. var fun = fonction lang (l) { dateformat.i18n = require (&#39;./lang/&#39; + l) retourne vrai; } js // code Javascript avec coloration syntaxique. var fun = fonction lang (l) { dateformat.i18n = require (&#39;./lang/&#39; + l) retourne vrai; } Blocs de code avec des exemples rendus Pour illustrer le code frontal, il est parfois utile d’afficher un exemple de rendu de ce code. Après avoir inclus les styles de votre projet dont vous aurez besoin pour afficher le rendu, vous pouvez utiliser un &lt;div&gt; avec la classe code-example, suivi de la syntaxe du bloc de code. Si vous voulez rendre votre sortie avec Markdown au lieu de HTML, utilisez l’attribut markdown =&quot; 1 &quot; pour indiquer à Jekyll que le code que vous restiturez sera au format Markdown … Ceci est sur le point d’être méta … Bouton de lien [Bouton de lien](http://example.com/){: .btn} &lt;div class = &quot;exemple de code&quot; markdown = &quot;1&quot;&gt; [Bouton de lien](http://example.com/) {: .btn} &lt;/div&gt; markdown [Bouton de lien](http://example.com/){: .btn}",
    "url": "http://localhost:4000/docs/ui-components/code/",
    "relUrl": "/docs/ui-components/code/"
  },
  "22": {
    "id": "22",
    "title": "Color",
    "content": "Color Utilities Light Greys exopal Greys Purples Blues Greens Yellows Reds All the colors used in Just the Docs have been systematized into a series of variables that have been extended to both font color and background color utility classes. Light Greys Color value Font color utility Background color utility grey-lt-000 .text-grey-lt-000 .bg-grey-lt-000 grey-lt-100 .text-grey-lt-100 .bg-grey-lt-100 grey-lt-200 .text-grey-lt-200 .bg-grey-lt-200 grey-lt-300 .text-grey-lt-300 .bg-grey-lt-300 exopal Greys Color value Font color utility Background color utility grey-dk-000 .text-grey-dk-000 .bg-grey-dk-000 grey-dk-100 .text-grey-dk-100 .bg-grey-dk-100 grey-dk-200 .text-grey-dk-200 .bg-grey-dk-200 grey-dk-250 .text-grey-dk-250 .bg-grey-dk-250 grey-dk-300 .text-grey-dk-300 .bg-grey-dk-300 Purples Color value Font color utility Background color utility purple-000 .text-purple-000 .bg-purple-000 purple-100 .text-purple-100 .bg-purple-100 purple-200 .text-purple-200 .bg-purple-200 purple-300 .text-purple-300 .bg-purple-300 Blues Color value Font color utility Background color utility blue-000 .text-blue-000 .bg-blue-000 blue-100 .text-blue-100 .bg-blue-100 blue-200 .text-blue-200 .bg-blue-200 blue-300 .text-blue-300 .bg-blue-300 Greens Color value Font color utility Background color utility green-000 .text-green-000 .bg-green-000 green-100 .text-green-100 .bg-green-100 green-200 .text-green-200 .bg-green-200 green-300 .text-green-300 .bg-green-300 Yellows Color value Font color utility Background color utility yellow-000 .text-yellow-000 .bg-yellow-000 yellow-100 .text-yellow-100 .bg-yellow-100 yellow-200 .text-yellow-200 .bg-yellow-200 yellow-300 .text-yellow-300 .bg-yellow-300 Reds Color value Font color utility Background color utility red-000 .text-red-000 .bg-red-000 red-100 .text-red-100 .bg-red-100 red-200 .text-red-200 .bg-red-200 red-300 .text-red-300 .bg-red-300",
    "url": "http://localhost:4000/docs/utilities/color/",
    "relUrl": "/docs/utilities/color/"
  },
  "23": {
    "id": "23",
    "title": "Modifier mes coordonnées",
    "content": "",
    "url": "http://localhost:4000/docs/Dashboard/cordonnees/",
    "relUrl": "/docs/Dashboard/cordonnees/"
  },
  "24": {
    "id": "24",
    "title": "Customization",
    "content": "Customization Color schemes Specific visual customization Color schemes New Just the Docs supports two color schemes: light (default), and exopal. To enable a color scheme, set the color_scheme parameter in your site’s _config.yml file: Example # Color scheme currently only supports &quot;exopal&quot; or nil (default) color_scheme: &quot;exopal&quot; Preview exopal color scheme Specific visual customization To customize your site’s aesthetic, open _sass/custom/custom.scss in your editor to see if there is a variable that you can override. Most styles like fonts, colors, spacing, etc. are derived from these variables. To override a specific variable, uncomment its line and change its value. For example, to change the link color from the purple default to blue, open _sass/custom/custom.css and find the $link-color variable on line 50. Uncomment it, and change its value to our $blue-000 variable, or another shade of your choosing. Example // ... // // $body-text-color: $grey-dk-100; // $body-heading-color: $grey-dk-300; $link-color: $blue-000; // // ... Note: Editing the variables directly in _sass/support/variables.scss is not recommended and can cause other dependencies to fail.",
    "url": "http://localhost:4000/docs/customization/",
    "relUrl": "/docs/customization/"
  },
  "25": {
    "id": "25",
    "title": "Étiquetage de ma commandes",
    "content": "",
    "url": "http://localhost:4000/docs/Preparation-et-collecte/etiquetage/",
    "relUrl": "/docs/Preparation-et-collecte/etiquetage/"
  },
  "26": {
    "id": "26",
    "title": "Markdown kitchen sink",
    "content": "Example Text can be bold, italic, or strikethrough. Link to another page. There should be whitespace between paragraphs. There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. Header 1 This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. Header 2 This is a blockquote following a header. When something is important enough, you do it even if the odds are not in your favor. Header 3 // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require(&#39;./lang/&#39; + l) return true; } # Ruby code with syntax highlighting GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, &quot;= #{version}&quot;) end Header 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 head1 head two three ok good swedish fish nice out of stock good and plenty nice ok good oreos hmm ok good zoute drop yumm There’s a horizontal rule below this. Here is an unordered list: Item foo Item bar Item baz Item zip And an ordered list: Item one Item two Item three Item four And a nested list: level 1 item level 2 item level 2 item level 3 item level 3 item level 1 item level 2 item level 2 item level 2 item level 1 item level 2 item level 2 item level 1 item Nesting an ol in ul in an ol level 1 item (ul) level 2 item (ol) level 2 item (ol) level 3 item (ul) level 3 item (ul) level 1 item (ul) level 2 item (ol) level 2 item (ol) level 3 item (ul) level 3 item (ul) level 4 item (ol) level 4 item (ol) level 3 item (ul) level 3 item (ul) level 1 item (ul) And a task list Hello, this is a TODO item Hello, this is another TODO item Goodbye, this item is done Small image Large image Definition lists can be used with HTML syntax. Name Godzilla Born 1952 Birthplace Japan Color Green Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. The final element.",
    "url": "http://localhost:4000/docs/index-test/",
    "relUrl": "/docs/index-test/"
  },
  "27": {
    "id": "27",
    "title": "Acceuil",
    "content": "Hello ddd comment aller vous. C’est quoi Générateur de site static pour la documentatoin du projet Exopal avec Jekyll, Jekyll est un générateur de site statique simple, compatible avec les blogs. Il prend un répertoire de modèles contenant des fichiers de texte brut dans divers formats, l’exécute via un convertisseur (comme Markdown) et son moteur de rendu Liquid, et crée un site Web statique complet et prêt à être publié pour servir avec votre serveur Web préféré. Le site Web de Jekyll se trouve à l’adresse http://jekyllrb.com/ , et la documentation peut être consultée à l’ adresse http://jekyllrb.com/docs/home/ . Table des matières Hello C’est quoi Typographie (composant UI) Pile de polices échelle de type sensible Rubriques Body text Inline elements Utilitaires typographiques Étiquettes (composant UI) Les tables (composant UI) Lists (composant UI) Liste non ordonnée Liste ordonnée Task list Liste de définition code en ligne Syntax en surbrillance des blocs de code Blocs de code avec des exemples rendus buttons (composant UI) Styles de buttons de base Des liens qui ressemblent à des buttons Elément Button Utiliser des utilitaires avec des buttons Taille du button Espacement entre les buttons buttons Styles de buttons de base Des liens qui ressemblent à des buttons Elément Button Utiliser des utilitaires avec des buttons Taille du button Espacement entre les buttons Utilities Responsive modifiers Layout Utilities Espacement Alignment Vertical Affichage Color Utilities Light Greys exopal Greys Purples Blues Greens Yellows Reds Typography Utilities Font size Line height Navigation Structure Main navigation Ordering pages Excluding pages Pages with children Child pages Auto-generating Table of Contents Children with children In-page navigation with Table of Contents Customization Color schemes Specific visual customization Search Set up search Generate search index Enable search in configuration Hiding pages from search Example Header 1 Header 2 Header 3 Header 4 Header 5 Header 6 There’s a horizontal rule below this. Here is an unordered list: And an ordered list: And a nested list: Nesting an ol in ul in an ol And a task list Small image Large image Definition lists can be used with HTML syntax. Typographie (composant UI) Pile de polices Par défaut, Just the Docs utilise une pile de polices système native pour les polices sans-serif: -apple-system, BlinkMacSystemFont, &quot;helvetica neue&quot;, helvetica, roboto, noto, &quot;segoe ui&quot;, arial, sans serif ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz Pour le type monospace, comme les extraits de code ou l’élément &lt;pre&gt;, Just the Docs utilise une pile de polices système native pour les polices monospace: &quot;SFMono-Regular&quot;, Menlo, Consolas, Monospace ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz échelle de type sensible Juste la documentation utilise une échelle de type sensible qui change en fonction de la taille de la fenêtre. Sélecteur Petite taille de l’écran font-size Grand écran font-size h1, .text-alpha 32px 36px h2, .text-beta 18px 24px h3, .text-gamma 16px 18px h4, .text-delta 14px 16px h5, .text-epsilon 16px 18px h6, .text-zeta 18px 24px body 14px 16px Rubriques Les titres sont rendus comme ceci: Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 Body text Le corps du texte par défaut est rendu comme ceci: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Inline elements Text peut être bold, italic, or strikethrough. Link to another page. Text peut être **bold**, _italic_, or ~~strikethrough~~. [Link to another page](another-page). Utilitaires typographiques Un certain nombre de classes CSS typographiques spécifiques vous permettent de remplacer le style par défaut pour la taille et l’épaisseur de la police, la hauteur de ligne et la capitalisation. View typography utilities Étiquettes (composant UI) Utilisez des étiquettes pour ajouter une marque supplémentaire à une section de vos documents. Les étiquettes sont disponibles en quelques couleurs. Par défaut, les étiquettes seront bleues. Étiquette par défaut Étiquette bleu Stable Nouvelle version Arrive bientôt Obsolète Étiquette par défaut {: .label} Étiquette bleu {: .label .label-blue} Stable {: .label .label-green} Nouvelle version {: .label .label-purple} Arrive bientôt {: .label .label-yellow} Obsolète {: .label .label-red} Les tables (composant UI) Les tables sont réactives par défaut, ce qui permet aux tables larges d’avoir un défilement horizontal pour accéder aux colonnes en dehors de la fenêtre d’affichage normale. entete entete 2 3 ok good swedish fish nice out of stock good and plenty nice ok good oreos hmm ok good zoute drop yumm | entete | entete 2 | 3 | |:-|:|:| | ok | good swedish fish | nice | | out of stock | good and plenty | nice | | ok | good `oreos` | hmm | | ok | good `zoute` drop | yumm | Lists (composant UI) La plupart des listes peuvent être rendues avec Markdown pur. Liste non ordonnée Item 1 Item 2 Item 3 or Item 1 Item 2 Item 3 - Item 1 - Item 2 - Item 3 _or_ * Item 1 * Item 2 * Item 3 Liste ordonnée Item 1 Item 2 Item 3 1. Item 1 1. Item 2 1. Item 3 Task list bonjour, ceci est une tâche bonjour, ceci est un autre article à faire au revoir, cet objet est terminé - [ ] bonjour, ceci est une tâche - [ ] bonjour, ceci est un autre article à faire - [x] au revoir, cet objet est terminé Liste de définition Les listes de définitions nécessitent la syntaxe HTML et ne sont pas prises en charge par le compilateur GitHub Flavored Markdown. Name Godzilla Born 1952 Birthplace Japan Color Green &lt;dl&gt; &lt;dt&gt;Name&lt;/dt&gt; &lt;dd&gt;Godzilla&lt;/dd&gt; &lt;dt&gt;Born&lt;/dt&gt; &lt;dd&gt;1952&lt;/dd&gt; &lt;dt&gt;Birthplace&lt;/dt&gt; &lt;dd&gt;Japan&lt;/dd&gt; &lt;dt&gt;Color&lt;/dt&gt; &lt;dd&gt;Green&lt;/dd&gt; &lt;/dl&gt; Code (composant UI) code en ligne Le code peut être rendu en ligne en l’enveloppant dans des ticks simples. Lorem ipsum dolor sit amet, &lt;extrait de code en ligne&gt; élit adipisicing, fait une incursion temporelle dans le travail et dolore magna aliqua. Lorem ipsum dolor sit amet, `&lt;extrait de code en ligne&gt;` élit adipisicing, fait une incursion temporelle dans le travail et dolore magna aliqua. Syntax en surbrillance des blocs de code Utilisez la syntaxe intégrée de Jekyll en mettant en surbrillance Rouge pour les blocs de code en utilisant trois backticks, suivis du nom de la langue: // code Javascript avec coloration syntaxique. var fun = fonction lang (l) { dateformat.i18n = require (&#39;./lang/&#39; + l) retourne vrai; } js // code Javascript avec coloration syntaxique. var fun = fonction lang (l) { dateformat.i18n = require (&#39;./lang/&#39; + l) retourne vrai; } Blocs de code avec des exemples rendus Pour illustrer le code frontal, il est parfois utile d’afficher un exemple de rendu de ce code. Après avoir inclus les styles de votre projet dont vous aurez besoin pour afficher le rendu, vous pouvez utiliser un &lt;div&gt; avec la classe code-example, suivi de la syntaxe du bloc de code. Si vous voulez rendre votre sortie avec Markdown au lieu de HTML, utilisez l’attribut markdown =&quot; 1 &quot; pour indiquer à Jekyll que le code que vous restiturez sera au format Markdown … Ceci est sur le point d’être méta … button de lien [button de lien](http://example.com/){: .btn} &lt;div class=&quot;code-example&quot; markdown = &quot;1&quot;&gt; [button de lien](http://example.com/){: .btn} &lt;/div&gt; markdown [button de lien](http://example.com/){: .btn} buttons (composant UI) Styles de buttons de base Des liens qui ressemblent à des buttons Link button button de lien button de lien button de lien button de lien [button de lien](http://example.com/){: .btn} [button de lien](http://example.com/){: .btn .btn-purple} [button de lien](http://example.com/){: .btn .btn-blue} [button de lien](http://example.com/){: .btn .btn-green} [button de lien](http://example.com/){: .btn .btn-outline} Elément Button GitHub Flavored Markdown ne supporte pas l’élément button, vous devrez donc utiliser du HTML intégré pour cela: Elément de button &lt;button type=&quot;button&quot; nom = &quot;button&quot; class=&quot;btn&quot;&gt; Elément de button &lt;/button&gt; Utiliser des utilitaires avec des buttons Taille du button Enveloppez le button dans un conteneur qui utilise les classes d’utilitaires de taille de police pour redimensionner les buttons: button gros cul Petit button de cul &lt;span class=&quot;fs-8&quot;&gt; [button de lien](http://example.com/){: .btn} &lt;/span&gt; &lt;span class=&quot;fs-3&quot;&gt; [Petit button de cul](http://example.com/){: .btn} &lt;/span&gt; Espacement entre les buttons Utilisez les classes d’utilitaires de marge pour ajouter un espacement entre deux buttons du même bloc. button avec espace Button button avec plus d’espace Button [button avec espace](http://example.com/){: .btn .btn-purple .mr-2} [Button](http://example.com/){: .btn .btn-blue} [button avec plus d&#39;espace](http://example.com/){: .btn .btn-green .mr-4} [Button](http://example.com/){: .btn .btn-blue} buttons Styles de buttons de base Des liens qui ressemblent à des buttons button de lien button de lien button de lien button de lien button de lien [button de lien](http://example.com/){: .btn} [button de lien](http://example.com/){: .btn .btn-purple} [button de lien](http://example.com/){: .btn .btn-blue} [button de lien](http://example.com/){: .btn .btn-green} [button de lien](http://example.com/){: .btn .btn-outline} Elément Button GitHub Flavored Markdown ne supporte pas l’élément button, vous devrez donc utiliser du HTML intégré pour cela: Elément de button &lt;button type=&quot;button&quot; name=&quot;button&quot; class=&quot;btn&quot;&gt; Elément de button &lt;/button&gt; Utiliser des utilitaires avec des buttons Taille du button Enveloppez le button dans un conteneur qui utilise les classes d’utilitaires de taille de police pour redimensionner les buttons: button gros cul Petit button de cul &lt;span class=&quot;fs-8&quot;&gt; [button de lien](http://example.com/){: .btn} &lt;/span&gt; &lt;span class=&quot;fs-3&quot;&gt; [Petit button de cul](http://example.com/){: .btn} &lt;/span&gt; Espacement entre les buttons Utilisez les classes d’utilitaires de marge pour ajouter un espacement entre deux buttons du même bloc. Button avec espace Button Button avec plus d’espace Button [Button avec espace](http://example.com/){: .btn .btn-purple .mr-2} [Button](http://example.com/){: .btn .btn-blue} [button avec plus d&#39;espace](http://example.com/){: .btn .btn-green .mr-4} [Button](http://example.com/){: .btn .btn-blue} Utilities Les classes d’utilitaires CSS sont pratiques lorsque vous souhaitez remplacer les styles par défaut pour créer des espaces supplémentaires (marges / marges), corriger les modifications inattendues de la taille ou de l’épaisseur de la police, ajouter de la couleur ou masquer (ou afficher) des éléments d’une taille d’écran spécifique. Responsive modifiers Seul l’espacement de la documentation fonctionne avec une variété de modificateurs qui vous permettent de cibler en réponse des tailles d’écran spécifiques. Utilisez-les conjointement avec les classes d’espacement et d’affichage de préfixes et suffixes. Modifier Taille écran (none) All screens until the next modifier xs 320px (20rem) and up sm 500px (31.25rem) and up md 740px (46.25rem) and up lg 1120px (70rem) and up xl 1400px (87.5rem) and up Layout Utilities Espacement Ces entretoises peuvent être utilisées pour les marges et le remplissage avec des classes utilitaires réactives. Combinez ces préfixes avec une taille d’écran et une échelle d’espacement pour les utiliser de manière réactive. Classname prefix Ce qu’il fait .m- margin .mx- margin-left, margin-right .my- margin top, margin bottom .mt- margin-top .mr- margin-right .mb- margin-bottom .ml- margin-left Classname prefix Ce qu’il fait .p- padding .px- padding-left, padding-right .py- padding top, padding bottom .pt- padding-top .pr- padding-right .pb- padding-bottom .pl- padding-left Spacing values are based on a 1rem = 16px spacing scale, broken down into these units: Spacer/suffix Size in rems Rem converted to px 1 0.25rem 4px 2 0.5rem 8px 3 0.75rem 12px 4 1rem 16px 5 1.5rem 24px 6 2rem 32px 7 2.5rem 40px 8 3rem 48px Examples Le Markdown, utilise le {: } wrapper pour appliquer des classes personnalisées: Ce paragraphe aura une marge inférieure de 1rem / 16px sur les grands écrans. {: .mb-lg-4 } Ce paragraphe aura un remplissage de 2rem / 32px à droite et à gauche pour toutes les tailles d’écran. {: .px-6 } Alignment Vertical Class nom Ce qu’il fait .v-align-baseline vertical-align: baseline .v-align-bottom vertical-align: bottom .v-align-middle vertical-align: middle .v-align-text-bottom vertical-align: text-bottom .v-align-text-top vertical-align: text-top .v-align-top vertical-align: top Affichage Les classes d’affichage aident à adapter la disposition des éléments sur une page: Class   .d-block display: block .d-flex display: flex .d-inline display: inline .d-inline-block display: inline-block .d-none display: none Utilisez ces classes conjointement avec les modificateurs responsive. Examples In Markdown, use the {: } wrapper to apply custom classes: This button will be hidden until medium screen sizes: [ A button ](#url) {: .d-none .d-md-inline-block } These headings will be `inline-block`: ### heading 3 {: .d-inline-block } ### heading 3 {: .d-inline-block } Color Utilities All the colors used in Just the Docs have been systematized into a series of variables that have been extended to both font color and background color utility classes. Light Greys Color value Font color utility Background color utility grey-lt-000 .text-grey-lt-000 .bg-grey-lt-000 grey-lt-100 .text-grey-lt-100 .bg-grey-lt-100 grey-lt-200 .text-grey-lt-200 .bg-grey-lt-200 grey-lt-300 .text-grey-lt-300 .bg-grey-lt-300 exopal Greys Color value Font color utility Background color utility grey-dk-000 .text-grey-dk-000 .bg-grey-dk-000 grey-dk-100 .text-grey-dk-100 .bg-grey-dk-100 grey-dk-200 .text-grey-dk-200 .bg-grey-dk-200 grey-dk-250 .text-grey-dk-250 .bg-grey-dk-250 grey-dk-300 .text-grey-dk-300 .bg-grey-dk-300 Purples Color value Font color utility Background color utility purple-000 .text-purple-000 .bg-purple-000 purple-100 .text-purple-100 .bg-purple-100 purple-200 .text-purple-200 .bg-purple-200 purple-300 .text-purple-300 .bg-purple-300 Blues Color value Font color utility Background color utility blue-000 .text-blue-000 .bg-blue-000 blue-100 .text-blue-100 .bg-blue-100 blue-200 .text-blue-200 .bg-blue-200 blue-300 .text-blue-300 .bg-blue-300 Greens Color value Font color utility Background color utility green-000 .text-green-000 .bg-green-000 green-100 .text-green-100 .bg-green-100 green-200 .text-green-200 .bg-green-200 green-300 .text-green-300 .bg-green-300 Yellows Color value Font color utility Background color utility yellow-000 .text-yellow-000 .bg-yellow-000 yellow-100 .text-yellow-100 .bg-yellow-100 yellow-200 .text-yellow-200 .bg-yellow-200 yellow-300 .text-yellow-300 .bg-yellow-300 Reds Color value Font color utility Background color utility red-000 .text-red-000 .bg-red-000 red-100 .text-red-100 .bg-red-100 red-200 .text-red-200 .bg-red-200 red-300 .text-red-300 .bg-red-300 Typography Utilities Font size Use the .fs-1 - .fs-10 to set an explicit font-size. Class Small screen size font-size Large screen size font-size .fs-1 9px 10px .fs-2 11px 12px .fs-3 12px 14px .fs-4 14px 16px .fs-5 16px 18px .fs-6 18px 24px .fs-7 24px 32px .fs-8 32px 38px .fs-9 38px 42px .fs-10 42px 48px Font size 1 Font size 2 Font size 3 Font size 4 Font size 5 Font size 6 Font size 7 Font size 8 Font size 9 Font size 10 In Markdown, use the `{: }` wrapper to apply custom classes: Font size 1 {: .fs-1 } Font size 2 {: .fs-2 } Font size 3 {: .fs-3 } Font size 4 {: .fs-4 } Font size 5 {: .fs-5 } Font size 6 {: .fs-6 } Font size 7 {: .fs-7 } Font size 8 {: .fs-8 } Font size 9 {: .fs-9 } Font size 10 {: .fs-10 } f ## Font weight Use the `.fw-300` - `.fw-700` to set an explicit font-size. &lt;div class=&quot;code-example&quot; markdown=&quot;1&quot;&gt; Font weight 300 {: .fw-300 } Font weight 400 {: .fw-400 } Font weight 500 {: .fw-500 } Font weight 700 {: .fw-700 } &lt;/div&gt; markdown In Markdown, use the `{: }` wrapper to apply custom classes: Font weight 300 {: .fw-300 } Font weight 400 {: .fw-400 } Font weight 500 {: .fw-500 } Font weight 700 {: .fw-700 } Line height Use the lh- classes to explicitly apply line height to text. Class line-height value Notes .lh-0 0   .lh-tight 1.1 Default for headings .lh-default 1.4 Default for body (paragraphs) No Line height No Line height Tight line height Tight line height Default line height Default line height In Markdown, use the `{: }` wrapper to apply custom classes: No Line height No Line height {: .lh-0 } Tight line height Tight line height {: .lh-tight } Default line height Default line height {: .fh-default } Navigation Structure Main navigation The main navigation for your Just the Docs site is on the left side of the page at large screens and on the top (behind a tap) on small screens. The main navigation can be structured to accommodate a multi-level menu system (pages with children and grandchildren). By default, all pages will appear as top level pages in the main nav unless a parent page is defined (see Pages with Children). Ordering pages To specify a page order, use the nav_order parameter in your pages’ YAML front matter. Example layout: default title: Customization nav_order: 4 Excluding pages For specific pages that you do not wish to include in the main navigation, e.g. a 404 page or a landing page, use the nav_exclude: true parameter in the YAML front matter for that page. Example layout: default title: 404 nav_exclude: true Pages with children Sometimes you will want to create a page with many children (a section). First, it is recommended that you keep pages that are related in a directory together… For example, in these docs, we keep all of the written documentation in the ./docs directory and each of the sections in subdirectories like ./docs/ui-components and ./docs/utilities. This gives us an organization like: +-- .. |-- (Jekyll files) | |-- docs | |-- ui-components | | |-- ui-components.md (parent page) | | |-- buttons.md | | |-- code.md | | |-- labels.md | | |-- tables.md | | +-- typography.md | | | |-- utilities | | |-- utilities.md (parent page) | | |-- color.md | | |-- layout.md | | |-- responsive-modifiers.md | | +-- typography.md | | | |-- (other md files, pages with no children) | +-- .. | |-- (Jekyll files) +-- .. On the parent pages, add 2 YAML front matter parameters: has_children: true (tells us that this is a parent page) permalink: set this to the site directory that contains the child pages Example layout: default title: UI Components nav_order: 2 has_children: true permalink: /docs/ui-components Here we’re setting up the UI Components landing page that is available at /docs/ui-components, which has children and is ordered second in the main nav. Child pages On child pages, simply set the parent: YAML front matter to whatever the parent’s page title is and set a nav order (this number is now scoped within the section). Example layout: default title: Buttons parent: UI Components nav_order: 2 The Buttons page appears as a child of UI Components and appears second in the UI Components section. Auto-generating Table of Contents By default, all pages with children will automatically append a Table of Contents which lists the child pages after the parent page’s content. To disable this auto Table of Contents, set has_toc: false in the parent page’s YAML front matter. Example layout: default title: UI Components nav_order: 2 has_children: true has_toc: false permalink: /docs/ui-components Children with children Child pages can also have children (grandchildren). This is achieved by using a similar pattern on the child and grandchild pages. Add the has_children attribute to the child Add the parent and grand_parent attribute to the grandchild Example layout: default title: Buttons parent: UI Components nav_order: 2 has_children: true layout: default title: Buttons Child Page parent: Buttons grand_parent: UI Components nav_order: 1 This would create the following navigation structure: +-- .. | |-- UI Components | |-- .. | | | |-- Buttons | | |-- Button Child Page | | | |-- .. | +-- .. Example # Aux links for the upper right navigation aux_links: &quot;Just the Docs on GitHub&quot;: - &quot;//github.com/pmarsceill/just-the-docs&quot; In-page navigation with Table of Contents To generate a Table of Contents on your docs pages, you can use the {:toc} method from Kramdown, immediately after an &lt;ol&gt; in Markdown. This will automatically generate an ordered list of anchor links to various sections of the page based on headings and heading levels. There may be occasions where you’re using a heading and you don’t want it to show up in the TOC, so to skip a particular heading use the {: .no_toc } CSS class. Example # Navigation Structure {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} This example skips the page name heading (#) from the TOC, as well as the heading for the Table of Contents itself (##) because it is redundant, followed by the table of contents itself. Customization Color schemes New Just the Docs supports two color schemes: light (default), and exopal. To enable a color scheme, set the color_scheme parameter in your site’s _config.yml file: Example # Color scheme currently only supports &quot;exopal&quot; or nil (default) color_scheme: &quot;exopal&quot; Preview exopal color scheme Specific visual customization To customize your site’s aesthetic, open _sass/custom/custom.scss in your editor to see if there is a variable that you can override. Most styles like fonts, colors, spacing, etc. are derived from these variables. To override a specific variable, uncomment its line and change its value. For example, to change the link color from the purple default to blue, open _sass/custom/custom.css and find the $link-color variable on line 50. Uncomment it, and change its value to our $blue-000 variable, or another shade of your choosing. Example // ... // // $body-text-color: $grey-dk-100; // $body-heading-color: $grey-dk-300; $link-color: $blue-000; // // ... Note: Editing the variables directly in _sass/support/variables.scss is not recommended and can cause other dependencies to fail. Search Just the Docs uses lunr.js to add a client-side search interface powered by a JSON index that Jekyll generates. All search results are shown in an auto-complete style interface (there is no search results page). By default, all generated HTML pages are indexed using the following data points: Page title Page content Page URL Set up search Generate search index Before you can use search, you must initialize the feature by running this rake command that comes with just-the-docs: $ bundle exec just-the-docs rake search:init This command creates the search-data.json file that Jekyll uses to create your search index. Alternatively, you can create the file manually in the assets/js/ directory of your Jekyll site with this content: { {% for page in site.html_pages %}{% if page.search_exclude != true %}&quot;{{ forloop.index0 }}&quot;: { &quot;id&quot;: &quot;{{ forloop.index0 }}&quot;, &quot;title&quot;: &quot;{{ page.title | replace: &#39;&amp;amp;&#39;, &#39;&amp;&#39; }}&quot;, &quot;content&quot;: &quot;{{ page.content | markdownify | strip_html | escape_once | remove: &#39;&#39; | remove: &#39;&#39; | remove: &#39;&#39; | replace: &#39; &#39;, &#39; &#39; | normalize_whitespace }}&quot;, &quot;url&quot;: &quot;{{ page.url | absolute_url }}&quot;, &quot;relUrl&quot;: &quot;{{ page.url }}&quot; }{% unless forloop.last %},{% endunless %} {% endif %}{% endfor %} } Note: If you don’t run this rake command or create this file manually, search will not work (or it will use the search index data from this docs site, not your site’s content). Enable search in configuration In your site’s _config.yml, enable search: # Enable or disable the site search search_enabled: true Hiding pages from search Sometimes you might have a page that you don’t want to be indexed for the search nor to show up in search results, e.g, a 404 page. To exclude a page from search, add the search_exclude: true parameter to the page’s YAML front matter: Example layout: default title: Page not found nav_exclude: true search_exclude: true Example Text can be bold, italic, or strikethrough. Link to another page. There should be whitespace between paragraphs. There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. Header 1 This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. Header 2 This is a blockquote following a header. When something is important enough, you do it even if the odds are not in your favor. Header 3 // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require(&#39;./lang/&#39; + l) return true; } # Ruby code with syntax highlighting GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, &quot;= #{version}&quot;) end Header 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 head1 head two three ok good swedish fish nice out of stock good and plenty nice ok good oreos hmm ok good zoute drop yumm There’s a horizontal rule below this. Here is an unordered list: Item foo Item bar Item baz Item zip And an ordered list: Item one Item two Item three Item four And a nested list: level 1 item level 2 item level 2 item level 3 item level 3 item level 1 item level 2 item level 2 item level 2 item level 1 item level 2 item level 2 item level 1 item Nesting an ol in ul in an ol level 1 item (ul) level 2 item (ol) level 2 item (ol) level 3 item (ul) level 3 item (ul) level 1 item (ul) level 2 item (ol) level 2 item (ol) level 3 item (ul) level 3 item (ul) level 4 item (ol) level 4 item (ol) level 3 item (ul) level 3 item (ul) level 1 item (ul) And a task list Hello, this is a TODO item Hello, this is another TODO item Goodbye, this item is done Small image Large image Definition lists can be used with HTML syntax. Name Godzilla Born 1952 Birthplace Japan Color Green Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. The final element.",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "28": {
    "id": "28",
    "title": "Labels",
    "content": "Étiquettes Utilisez des étiquettes pour ajouter une marque supplémentaire à une section de vos documents. Les étiquettes sont disponibles en quelques couleurs. Par défaut, les étiquettes seront bleues. Étiquette par défaut Étiquette bleu Stable Nouvelle version Arrive bientôt Obsolète Étiquette par défaut {: .label} Étiquette bleu {: .label .label-blue} Stable {: .label .label-green} Nouvelle version {: .label .label-purple} Arrive bientôt {: .label .label-yellow} Obsolète {: .label .label-red}",
    "url": "http://localhost:4000/docs/ui-components/labels/",
    "relUrl": "/docs/ui-components/labels/"
  },
  "29": {
    "id": "29",
    "title": "Layout",
    "content": "Layout Utilities Spacing Vertical Alignment Display Spacing These spacers are available to use for margins and padding with responsive utility classes. Combine these prefixes with a screen size and spacing scale to use them responsively. Classname prefix What it does .m- margin .mx- margin-left, margin-right .my- margin top, margin bottom .mt- margin-top .mr- margin-right .mb- margin-bottom .ml- margin-left Classname prefix What it does .p- padding .px- padding-left, padding-right .py- padding top, padding bottom .pt- padding-top .pr- padding-right .pb- padding-bottom .pl- padding-left Spacing values are based on a 1rem = 16px spacing scale, broken down into these units: Spacer/suffix Size in rems Rem converted to px 1 0.25rem 4px 2 0.5rem 8px 3 0.75rem 12px 4 1rem 16px 5 1.5rem 24px 6 2rem 32px 7 2.5rem 40px 8 3rem 48px Examples In Markdown, use the {: } wrapper to apply custom classes: This paragraph will have a margin bottom of 1rem/16px at large screens. {: .mb-lg-4 } This paragraph will have 2rem/32px of padding on the right and left at all screen sizes. {: .px-6 } Vertical Alignment Classname What it does .v-align-baseline vertical-align: baseline .v-align-bottom vertical-align: bottom .v-align-middle vertical-align: middle .v-align-text-bottom vertical-align: text-bottom .v-align-text-top vertical-align: text-top .v-align-top vertical-align: top Display Display classes aid in adapting the layout of the elements on a page: Class   .d-block display: block .d-flex display: flex .d-inline display: inline .d-inline-block display: inline-block .d-none display: none Use these classes in conjunction with the responsive modifiers. Examples In Markdown, use the {: } wrapper to apply custom classes: This button will be hidden until medium screen sizes: [ A button ](#url) {: .d-none .d-md-inline-block } These headings will be `inline-block`: ### heading 3 {: .d-inline-block } ### heading 3 {: .d-inline-block }",
    "url": "http://localhost:4000/docs/utilities/layout/",
    "relUrl": "/docs/utilities/layout/"
  },
  "30": {
    "id": "30",
    "title": "Lists",
    "content": "Lists Table des matière Liste non ordonnée Liste ordonnée Task list Liste de définition La plupart des listes peuvent être rendues avec Markdown pur. Liste non ordonnée Item 1 Item 2 Item 3 or Item 1 Item 2 Item 3 - Item 1 - Item 2 - Item 3 _or_ * Item 1 * Item 2 * Item 3 Liste ordonnée Item 1 Item 2 Item 3 1. Item 1 1. Item 2 1. Item 3 Task list bonjour, ceci est une tâche bonjour, ceci est un autre article à faire au revoir, cet objet est terminé - [ ] bonjour, ceci est une tâche - [ ] bonjour, ceci est un autre article à faire - [x] au revoir, cet objet est terminé Liste de définition Les listes de définitions nécessitent la syntaxe HTML et ne sont pas prises en charge par le compilateur GitHub Flavored Markdown. Name Godzilla Born 1952 Birthplace Japan Color Green &lt;dl&gt; &lt;dt&gt;Name&lt;/dt&gt; &lt;dd&gt;Godzilla&lt;/dd&gt; &lt;dt&gt;Born&lt;/dt&gt; &lt;dd&gt;1952&lt;/dd&gt; &lt;dt&gt;Birthplace&lt;/dt&gt; &lt;dd&gt;Japan&lt;/dd&gt; &lt;dt&gt;Color&lt;/dt&gt; &lt;dd&gt;Green&lt;/dd&gt; &lt;/dl&gt;",
    "url": "http://localhost:4000/docs/ui-components/lists/",
    "relUrl": "/docs/ui-components/lists/"
  },
  "31": {
    "id": "31",
    "title": "Dashboard",
    "content": "",
    "url": "http://localhost:4000/docs/Dashboard",
    "relUrl": "/docs/Dashboard"
  },
  "32": {
    "id": "32",
    "title": "Modifier mon mot de passe",
    "content": "",
    "url": "http://localhost:4000/docs/Dashboard/mot-de-passe/",
    "relUrl": "/docs/Dashboard/mot-de-passe/"
  },
  "33": {
    "id": "33",
    "title": "Navigation Structure",
    "content": "Navigation Structure Main navigation The main navigation for your Just the Docs site is on the left side of the page at large screens and on the top (behind a tap) on small screens. The main navigation can be structured to accommodate a multi-level menu system (pages with children and grandchildren). By default, all pages will appear as top level pages in the main nav unless a parent page is defined (see Pages with Children). Ordering pages To specify a page order, use the nav_order parameter in your pages’ YAML front matter. Example layout: default title: Customization nav_order: 4 Excluding pages For specific pages that you do not wish to include in the main navigation, e.g. a 404 page or a landing page, use the nav_exclude: true parameter in the YAML front matter for that page. Example layout: default title: 404 nav_exclude: true Pages with children Sometimes you will want to create a page with many children (a section). First, it is recommended that you keep pages that are related in a directory together… For example, in these docs, we keep all of the written documentation in the ./docs directory and each of the sections in subdirectories like ./docs/ui-components and ./docs/utilities. This gives us an organization like: +-- .. |-- (Jekyll files) | |-- docs | |-- ui-components | | |-- ui-components.md (parent page) | | |-- buttons.md | | |-- code.md | | |-- labels.md | | |-- tables.md | | +-- typography.md | | | |-- utilities | | |-- utilities.md (parent page) | | |-- color.md | | |-- layout.md | | |-- responsive-modifiers.md | | +-- typography.md | | | |-- (other md files, pages with no children) | +-- .. | |-- (Jekyll files) +-- .. On the parent pages, add 2 YAML front matter parameters: has_children: true (tells us that this is a parent page) permalink: set this to the site directory that contains the child pages Example layout: default title: UI Components nav_order: 2 has_children: true permalink: /docs/ui-components Here we’re setting up the UI Components landing page that is available at /docs/ui-components, which has children and is ordered second in the main nav. Child pages On child pages, simply set the parent: YAML front matter to whatever the parent’s page title is and set a nav order (this number is now scoped within the section). Example layout: default title: Buttons parent: UI Components nav_order: 2 The Buttons page appears as a child of UI Components and appears second in the UI Components section. Auto-generating Table of Contents By default, all pages with children will automatically append a Table of Contents which lists the child pages after the parent page’s content. To disable this auto Table of Contents, set has_toc: false in the parent page’s YAML front matter. Example layout: default title: UI Components nav_order: 2 has_children: true has_toc: false permalink: /docs/ui-components Children with children Child pages can also have children (grandchildren). This is achieved by using a similar pattern on the child and grandchild pages. Add the has_children attribute to the child Add the parent and grand_parent attribute to the grandchild Example layout: default title: Buttons parent: UI Components nav_order: 2 has_children: true layout: default title: Buttons Child Page parent: Buttons grand_parent: UI Components nav_order: 1 This would create the following navigation structure: +-- .. | |-- UI Components | |-- .. | | | |-- Buttons | | |-- Button Child Page | | | |-- .. | +-- .. Example # Aux links for the upper right navigation aux_links: &quot;Just the Docs on GitHub&quot;: - &quot;//github.com/pmarsceill/just-the-docs&quot; In-page navigation with Table of Contents To generate a Table of Contents on your docs pages, you can use the {:toc} method from Kramdown, immediately after an &lt;ol&gt; in Markdown. This will automatically generate an ordered list of anchor links to various sections of the page based on headings and heading levels. There may be occasions where you’re using a heading and you don’t want it to show up in the TOC, so to skip a particular heading use the {: .no_toc } CSS class. Example # Navigation Structure {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} This example skips the page name heading (#) from the TOC, as well as the heading for the Table of Contents itself (##) because it is redundant, followed by the table of contents itself.",
    "url": "http://localhost:4000/docs/navigation-structure/",
    "relUrl": "/docs/navigation-structure/"
  },
  "34": {
    "id": "34",
    "title": "Poids et dimensions maximales autorisés",
    "content": "",
    "url": "http://localhost:4000/docs/Preparation-et-collecte/poids/",
    "relUrl": "/docs/Preparation-et-collecte/poids/"
  },
  "35": {
    "id": "35",
    "title": "Remboursement",
    "content": "",
    "url": "http://localhost:4000/docs/Facturation-paiement/remboursement/",
    "relUrl": "/docs/Facturation-paiement/remboursement/"
  },
  "36": {
    "id": "36",
    "title": "Responsive Modifiers",
    "content": "Responsive modifiers Just the Docs spacing works in conjunction with a variety of modifiers that allow you to target specific screen sizes responsively. Use these in conjunction with spacing and display prefix and suffix classes. Modifier Screen size (none) All screens until the next modifier xs 320px (20rem) and up sm 500px (31.25rem) and up md 740px (46.25rem) and up lg 1120px (70rem) and up xl 1400px (87.5rem) and up",
    "url": "http://localhost:4000/docs/utilities/responsive-modifiers/",
    "relUrl": "/docs/utilities/responsive-modifiers/"
  },
  "37": {
    "id": "37",
    "title": "Search",
    "content": "Search Just the Docs uses lunr.js to add a client-side search interface powered by a JSON index that Jekyll generates. All search results are shown in an auto-complete style interface (there is no search results page). By default, all generated HTML pages are indexed using the following data points: Page title Page content Page URL Set up search Generate search index Before you can use search, you must initialize the feature by running this rake command that comes with just-the-docs: $ bundle exec just-the-docs rake search:init This command creates the search-data.json file that Jekyll uses to create your search index. Alternatively, you can create the file manually in the assets/js/ directory of your Jekyll site with this content: {% raw %} { {% for page in site.html_pages %}{% if page.search_exclude != true %}&quot;{{ forloop.index0 }}&quot;: { &quot;id&quot;: &quot;{{ forloop.index0 }}&quot;, &quot;title&quot;: &quot;{{ page.title | replace: &#39;&amp;amp;&#39;, &#39;&amp;&#39; }}&quot;, &quot;content&quot;: &quot;{{ page.content | markdownify | strip_html | escape_once | remove: &#39;&#39; | remove: &#39;&#39; | remove: &#39;&#39; | replace: &#39; &#39;, &#39; &#39; | normalize_whitespace }}&quot;, &quot;url&quot;: &quot;{{ page.url | absolute_url }}&quot;, &quot;relUrl&quot;: &quot;{{ page.url }}&quot; }{% unless forloop.last %},{% endunless %} {% endif %}{% endfor %} }{% endraw %} Note: If you don’t run this rake command or create this file manually, search will not work (or it will use the search index data from this docs site, not your site’s content). Enable search in configuration In your site’s _config.yml, enable search: # Enable or disable the site search search_enabled: true Hiding pages from search Sometimes you might have a page that you don’t want to be indexed for the search nor to show up in search results, e.g, a 404 page. To exclude a page from search, add the search_exclude: true parameter to the page’s YAML front matter: Example layout: default title: Page not found nav_exclude: true search_exclude: true",
    "url": "http://localhost:4000/docs/search/",
    "relUrl": "/docs/search/"
  },
  "38": {
    "id": "38",
    "title": "Tables",
    "content": "Les tables Les tables sont réactives par défaut, ce qui permet aux tables larges d’avoir un défilement horizontal pour accéder aux colonnes en dehors de la fenêtre d’affichage normale. entete entete 2 3 ok good swedish fish nice out of stock good and plenty nice ok good oreos hmm ok good zoute drop yumm | entete | entete 2 | 3 | |:-|:|:| | ok | good swedish fish | nice | | out of stock | good and plenty | nice | | ok | good `oreos` | hmm | | ok | good `zoute` drop | yumm |",
    "url": "http://localhost:4000/docs/ui-components/tables/",
    "relUrl": "/docs/ui-components/tables/"
  },
  "39": {
    "id": "39",
    "title": "Typography",
    "content": "Typographie Table des matières Pile de polices échelle de type sensible Rubriques Body text Inline elements Utilitaires typographiques Pile de polices Par défaut, Just the Docs utilise une pile de polices système native pour les polices sans-serif: -apple-system, BlinkMacSystemFont, &quot;helvetica neue&quot;, helvetica, roboto, noto, &quot;segoe ui&quot;, arial, sans serif ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz Pour le type monospace, comme les extraits de code ou l’élément &lt;pre&gt;, Just the Docs utilise une pile de polices système native pour les polices monospace: &quot;SFMono-Regular&quot;, Menlo, Consolas, Monospace ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz échelle de type sensible Juste la documentation utilise une échelle de type sensible qui change en fonction de la taille de la fenêtre. Sélecteur Petite taille de l’écran font-size Grand écran font-size h1, .text-alpha 32px 36px h2, .text-beta 18px 24px h3, .text-gamma 16px 18px h4, .text-delta 14px 16px h5, .text-epsilon 16px 18px h6, .text-zeta 18px 24px body 14px 16px Rubriques Les titres sont rendus comme ceci: Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 Body text Le corps du texte par défaut est rendu comme ceci: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Inline elements Text peut être bold, italic, or strikethrough. Link to another page. Text peut être **bold**, _italic_, or ~~strikethrough~~. [Link to another page](another-page). Utilitaires typographiques Un certain nombre de classes CSS typographiques spécifiques vous permettent de remplacer le style par défaut pour la taille et l’épaisseur de la police, la hauteur de ligne et la capitalisation. View typography utilities",
    "url": "http://localhost:4000/docs/ui-components/typography/",
    "relUrl": "/docs/ui-components/typography/"
  },
  "40": {
    "id": "40",
    "title": "Typography",
    "content": "Typography Utilities Font size Use the .fs-1 - .fs-10 to set an explicit font-size. Class Small screen size font-size Large screen size font-size .fs-1 9px 10px .fs-2 11px 12px .fs-3 12px 14px .fs-4 14px 16px .fs-5 16px 18px .fs-6 18px 24px .fs-7 24px 32px .fs-8 32px 38px .fs-9 38px 42px .fs-10 42px 48px Font size 1 Font size 2 Font size 3 Font size 4 Font size 5 Font size 6 Font size 7 Font size 8 Font size 9 Font size 10 In Markdown, use the `{: }` wrapper to apply custom classes: Font size 1 {: .fs-1 } Font size 2 {: .fs-2 } Font size 3 {: .fs-3 } Font size 4 {: .fs-4 } Font size 5 {: .fs-5 } Font size 6 {: .fs-6 } Font size 7 {: .fs-7 } Font size 8 {: .fs-8 } Font size 9 {: .fs-9 } Font size 10 {: .fs-10 } Font weight Use the .fw-300 - .fw-700 to set an explicit font-size. Font weight 300 Font weight 400 Font weight 500 Font weight 700 In Markdown, use the `{: }` wrapper to apply custom classes: Font weight 300 {: .fw-300 } Font weight 400 {: .fw-400 } Font weight 500 {: .fw-500 } Font weight 700 {: .fw-700 } Line height Use the lh- classes to explicitly apply line height to text. Class line-height value Notes .lh-0 0   .lh-tight 1.1 Default for headings .lh-default 1.4 Default for body (paragraphs) No Line height No Line height Tight line height Tight line height Default line height Default line height In Markdown, use the `{: }` wrapper to apply custom classes: No Line height No Line height {: .lh-0 } Tight line height Tight line height {: .lh-tight } Default line height Default line height {: .fh-default }",
    "url": "http://localhost:4000/docs/utilities/typography/",
    "relUrl": "/docs/utilities/typography/"
  },
  "41": {
    "id": "41",
    "title": "UI Components",
    "content": "Composants d’interface utilisateur Pour simplifier au maximum la rédaction de documentation dans Markdown, la plupart des composants d’UI sont stylisés à l’aide d’éléments Markdown par défaut et ne nécessitent que peu de classes CSS supplémentaires.",
    "url": "http://localhost:4000/docs/ui-components",
    "relUrl": "/docs/ui-components"
  },
  "42": {
    "id": "42",
    "title": "Utilities",
    "content": "Utilities CSS utility classes come in handy when you to want to override default styles to create additional whitespace (margins/padding), correct unexpected shifts in font size or weight, add color, or hide (or show) something at a specific screen size.",
    "url": "http://localhost:4000/docs/utilities",
    "relUrl": "/docs/utilities"
  }
  
}
